package com.clearance.tracker.security;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;
import java.util.List;

/**
 * JWT Token Generator - For testing and development purposes only
 * In production, tokens should be generated by an authentication service
 */
@Component
public class JwtTokenGenerator {

    @Value("${security.jwt.secret-key}")
    private String secretKey;

    @Value("${security.jwt.expiration-time}")
    private long jwtExpiration;

    @Value("${security.jwt.issuer}")
    private String issuer;

    private SecretKey getSigningKey() {
        byte[] keyBytes = Decoders.BASE64.decode(secretKey);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    public String generateToken(String username, String subjectPersonaObjectId, List<String> roles) {
        return generateToken(username, subjectPersonaObjectId, roles, jwtExpiration);
    }

    public String generateToken(String username, String subjectPersonaObjectId, List<String> roles, long expiration) {
        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + expiration);

        return Jwts.builder()
                .subject(username)
                .issuer(issuer)
                .issuedAt(now)
                .expiration(expiryDate)
                .claim("subjectPersonaObjectId", subjectPersonaObjectId)
                .claim("roles", roles)
                .signWith(getSigningKey())
                .compact();
    }

    /**
     * Generate a test token for development/testing
     */
    public String generateTestToken() {
        return generateToken(
            "john.doe@example.com",
            "272ad768-ea92-4972-a8a5-2c270fdddd33",
            List.of("USER")
        );
    }

    /**
     * Generate an admin test token for development/testing
     */
    public String generateAdminTestToken() {
        return generateToken(
            "admin@example.com",
            "admin-uuid-1234-5678-9012-345678901234",
            List.of("ADMIN", "USER")
        );
    }
}